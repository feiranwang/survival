deepdive {

  schema.variables {
    survival.label  : "CensoredMultinomial(5, is_censored)"
    #survival.label  : "Categorical(5)"
    #gene_features.feature: RealNumber
    # image_features.feature: RealNumber
  }

  schema.images {
    survival.file : /home/ubuntu/feiran/deepdive/app/survival/input/dense10
  }

  extraction.extractors {
    ext_survival {
      style: "tsv_extractor"
      input: """select p.pid, s.file, p.survival_days, p.is_dead
        from patients p, slides s
        where p.pid = s.pid
        order by p.pid"""
      output_relation: "survival"
      udf: ${APP_HOME}"/udf/ext_survival.py"
    }

    ext_clear_table {
      style: "sql_extractor"
      sql: """
        truncate survival;
        truncate features;
        truncate gene_features;
        """
    }

    ext_features {
      style: "tsv_extractor"
      input: """
       SELECT  doc_id,
               array_to_string(lemmas, '~^~'),
               array_to_string(poses, '~^~')
         FROM  sentences"""
      output_relation: "features"
      udf: ${APP_HOME}"/udf/ext_features.py"
      dependencies: ["ext_survival"]
    }

    load_gene_features {
      style: "tsv_extractor"
      input: "select 0 limit 0"
      output_relation: "gene_features"
      udf: ${APP_HOME}"/udf/load_gene_features.py "${APP_HOME}"/input/RNAseq.csv "${APP_HOME}"/input/RNAseqTcgaID.csv "${APP_HOME}"/input/cellProfilerStageIY.csv"
      dependencies: ["ext_clear_table"]
    }

    load_image_features {
      style: "tsv_extractor"
      input: "select 0 limit 0"
      output_relation: "image_features"
      udf: ${APP_HOME}"/udf/load_image_features.py "${APP_HOME}"/input/cellProfilerStageIY.csv "${APP_HOME}"/input/image_features.csv"
      dependencies: ["ext_clear_table"]
    }
  }

  inference.factors: {

    factor_cnn {
      input_query: """
          SELECT survival.id as "survival.id", survival.file as "survival.file",
                 survival.label as "survival.label"
            FROM survival
        """
      function: "Multinomial(survival.label)"
      mode: "cnn"
      cnn_configurations: ["solver.prototxt", "train_val.prototxt"]
      weight: 0
      gpu: 0
      port: 5555
    }

    factor_grade {
      input_query: """
          SELECT survival.id as "survival.id", survival.label as "survival.label",
                 grades.grade as grade
            FROM survival, grades
            WHERE survival.pid = grades.pid
        """
      function: "Multinomial(survival.label)"
      weight: "?(grade)"
    }

    factor_feature {
      input_query: """
          SELECT survival.id as "survival.id", survival.label as "survival.label",
                 features.feature as feature
            FROM survival, features
            WHERE survival.pid = features.pid
        """
      function: "Multinomial(survival.label)"
      weight: "?(feature)"
    }

    factor_gene {
      input_query: """
          SELECT survival.id as "survival.id",
                 gene_features.id as "gene_features.id",
                 gene_features.index as "index"
            FROM survival, gene_features
           WHERE survival.pid = gene_features.pid
        """
      function: "MTLR(survival.label, gene_features.feature)"
      weight: "?(index)"
    }

    factor_image {
      input_query: """
          SELECT survival.id as "survival.id",
                 image_features.id as "image_features.id",
                 image_features.index as "index"
            FROM survival, image_features
           WHERE survival.pid = image_features.pid
        """
      function: "MTLR(survival.label, image_features.feature)"
      weight: "?(index)"
    }
  }

  # pipeline.pipelines.inf: ["factor_cnn", "factor_grade", "factor_feature", "factor_gene"]
  pipeline.pipelines.inf: ["factor_grade"]
  # pipeline.pipelines.inf: ["factor_cnn"]
  # pipeline.pipelines.inf: ["factor_cnn", "factor_grade", "factor_feature"]
  # pipeline.pipelines.ext: ["ext_survival", "ext_clear_table", "ext_features", "load_gene_features"]
  pipeline.pipelines.ext: ["ext_survival"]

  sampler.sampler_cmd: "/home/ubuntu/feiran/sampler/dw"
  sampler.sampler_args: "-s 1 -l 200 -i 500 --diminish 0.99 --alpha 0.1"
  calibration.holdout_query: "INSERT INTO dd_graph_variables_holdout(variable_id) SELECT id FROM survival where sid >= "${STARTPID}" AND sid < "${ENDPID}
  #calibration.observation_query: "INSERT INTO dd_graph_variables_observation SELECT id FROM gene_features"
  # calibration.observation_query: "INSERT INTO dd_graph_variables_observation SELECT id FROM image_features"
  # calibration.holdout_fraction: 0.25
}
